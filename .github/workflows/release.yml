name: Auto Release from ChangeLog

on:
  # Runs on closed pull request targeting the main branch
  pull_request:
    types:
      - closed
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    name: Create Release from ChangeLog
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract latest version from ChangeLog
        id: get_version
        run: |
          VERSION=$(grep -oP "(?<=## \[v)[0-9]+\.[0-9]+\.[0-9]+" ChangeLog.md | head -1)
          echo "Latest version found: v$VERSION"
          echo "VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Extract latest change message from ChangeLog
        id: get_message
        run: |
          MESSAGE=$(awk '/## \[v/{f++} f==1' ChangeLog.md | tail -n +3)
          echo "Latest message found: $MESSAGE"
          {
            echo 'MESSAGE<<EOF'
            echo "$MESSAGE"
            echo 'EOF'
          } >> "$GITHUB_ENV"

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION"; then
            echo "Tag already exists. Skipping release."
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Creating new release for $VERSION"
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Get the last tag
        id: get_last_tag
        run: |
          git fetch --tags
          LAST_TAG=$(git tag --sort=-creatordate | head -n 1)
          if [ -n "$LAST_TAG" ]; then
            echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          else
            echo "No tags found, skipping." >> $GITHUB_ENV
          fi

      - name: Create Git Tag
        if: env.EXISTS == 'false'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Build release body
        id: build_body
        run: |
          {
            echo 'BODY<<EOF'
            echo "ðŸš€ **New Release ${{ env.VERSION }}**"
            echo ""
            echo "${{ env.MESSAGE }}"
            echo ""
            echo ""
            echo "**Details:**"
            if [ -z "$LAST_TAG" ]; then
              echo "See changes here: https://github.com/${{ github.repository }}/commits/${{ env.VERSION }}"
            else
              echo "See changes here: https://github.com/${{ github.repository }}/compare/${{ env.LAST_TAG }}...${{ env.VERSION }}"
            fi
            echo 'EOF'
          } >> "$GITHUB_ENV"

      - name: Create GitHub Release
        if: env.EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: ${{ env.BODY }}
          draft: false
          prerelease: false
          # files: |
          # build/*
