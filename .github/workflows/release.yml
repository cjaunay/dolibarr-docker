name: Auto Release from ChangeLog

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    name: Create Release from ChangeLog
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract latest version from ChangeLog
        id: get_version
        run: |
          VERSION=$(grep -oP "(?<=## \[v)[0-9]+\.[0-9]+\.[0-9]+" ChangeLog.md | head -1)
          echo "Latest version found: v$VERSION"
          echo "VERSION=v$VERSION" >> $GITHUB_ENV

      - name: Extract latest change message from ChangeLog
        id: get_message
        run: |
          MESSAGE=$(awk '/## \[v/{f++} f==1' ChangeLog.md | tail -n +2)
          echo "Latest message found: $MESSAGE"
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV

      - name: Check if tag already exists
        id: check_tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION"; then
            echo "Tag already exists. Skipping release."
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Creating new release for $VERSION"
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create Git Tag
        if: env.EXISTS == 'false'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        if: env.EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Release ${{ env.VERSION }}
          body: |
            ðŸš€ **New Release ${{ env.VERSION }}**

            Changelog:
            ${{ env.MESSAGE }}
          draft: false
          prerelease: false
